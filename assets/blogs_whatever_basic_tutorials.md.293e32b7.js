import{_ as i,o as e,c as l,Q as a}from"./chunks/framework.1fa2d359.js";const f=JSON.parse('{"title":"BASIC_TUTORIALS","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/whatever/basic_tutorials.md","filePath":"blogs/whatever/basic_tutorials.md","lastUpdated":1694435301000}'),t={name:"blogs/whatever/basic_tutorials.md"},r=a('<h1 id="basic-tutorials" tabindex="-1">BASIC_TUTORIALS <a class="header-anchor" href="#basic-tutorials" aria-label="Permalink to &quot;BASIC_TUTORIALS&quot;">​</a></h1><h2 id="recommand-tutorials" tabindex="-1">Recommand Tutorials <a class="header-anchor" href="#recommand-tutorials" aria-label="Permalink to &quot;Recommand Tutorials&quot;">​</a></h2><h3 id="计算机基础" tabindex="-1">计算机基础 <a class="header-anchor" href="#计算机基础" aria-label="Permalink to &quot;计算机基础&quot;">​</a></h3><p>推荐书籍（按照难度排序）：</p><ul><li><p>[ ] Computer Systems: A Programmer&#39;s Perspective (CSAPP)</p></li><li><p>[ ] 计算机程序的构造和解释（SICP）</p></li><li><p>计算机组成与设计：硬件/软件接口</p></li><li><p>操作系统概念（恐龙书）</p></li><li><p>程序员修炼之道2：通向务实的最高境界</p></li><li><p>编译原理（龙书）</p></li></ul><h3 id="c" tabindex="-1">C++ <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C++&quot;">​</a></h3><p>基础</p><ul><li>C++ Primer(Plus)</li><li><a href="https://www.bilibili.com/video/BV1Vf4y1P7pq" target="_blank" rel="noreferrer">于仕琪老师的Bilibili网课</a></li><li>C++ Programming Language</li></ul><p>进阶</p><ul><li>Effective C++</li><li>More Effective C++</li><li>Effective Modern C++</li><li>Modern C++ Tutorial: C++11/14/17/20 On the Fly</li><li><a href="https://github.com/AnthonyCalandra/modern-cpp-features" target="_blank" rel="noreferrer">https://github.com/AnthonyCalandra/modern-cpp-features</a></li><li><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines" target="_blank" rel="noreferrer">http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines</a></li><li><a href="https://space.bilibili.com/263032155/channel/collectiondetail?sid=53025" target="_blank" rel="noreferrer">小彭老师的Bilibili公开课</a></li></ul><p>骨灰</p><ul><li><a href="https://www.youtube.com/user/CppCon" target="_blank" rel="noreferrer">https://www.youtube.com/user/CppCon</a></li><li><a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/" target="_blank" rel="noreferrer">https://www.open-std.org/jtc1/sc22/wg21/docs/papers/</a></li><li><a href="http://purecpp.org/" target="_blank" rel="noreferrer">http://purecpp.org/</a></li></ul><h3 id="linux-git-shell" tabindex="-1">Linux/Git/Shell <a class="header-anchor" href="#linux-git-shell" aria-label="Permalink to &quot;Linux/Git/Shell&quot;">​</a></h3><ul><li><a href="https://git-scm.com/docs/user-manual" target="_blank" rel="noreferrer">https://git-scm.com/docs/user-manual</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/" target="_blank" rel="noreferrer">https://linuxtools-rst.readthedocs.io/zh_CN/latest/</a></li></ul><h2 id="快速跳转" tabindex="-1">快速跳转 <a class="header-anchor" href="#快速跳转" aria-label="Permalink to &quot;快速跳转&quot;">​</a></h2><ul><li><a href="https://en.cppreference.com/w/" target="_blank" rel="noreferrer">cppreference</a></li><li><a href="https://github.com/g-truc/glm/blob/master/manual.md" target="_blank" rel="noreferrer">glm manual</a> or <a href="https://nas.artinx.club:5001/sharing/q01EttQss" target="_blank" rel="noreferrer">Opengl-glm</a></li><li><a href="https://docs.opencv.org/4.x/" target="_blank" rel="noreferrer">OpenCV doc</a></li><li><a href="https://www.robomaster.com/zh-CN/resource/pages/announcement/1370" target="_blank" rel="noreferrer">规则手册</a></li></ul><h1 id="checklist" tabindex="-1">CheckList <a class="header-anchor" href="#checklist" aria-label="Permalink to &quot;CheckList&quot;">​</a></h1><h2 id="c-1" tabindex="-1">C++ <a class="header-anchor" href="#c-1" aria-label="Permalink to &quot;C++&quot;">​</a></h2><h5 id="data-type" tabindex="-1">Data Type <a class="header-anchor" href="#data-type" aria-label="Permalink to &quot;Data Type&quot;">​</a></h5><ul><li>[x] 基本数据类型（void,bool,各类整型和浮点,指针）</li><li>[x] 定长整型(int64_t),size_t,ptrdiff_t</li><li>[x] std::numeric_limits</li><li>[x] 和类型union</li><li>[x] 积类型struct</li><li>[ ] array</li><li>[ ] 内存对齐</li><li>[ ] sizeof/alignof/alignas</li><li>[x] Pointer&amp;Reference</li><li>[x] nullptr</li><li>[x] literals of ints/floats/strings</li><li>[x] user-defined literals</li><li>[ ] const specifier and const_cast</li></ul><h5 id="data-flow" tabindex="-1">Data Flow <a class="header-anchor" href="#data-flow" aria-label="Permalink to &quot;Data Flow&quot;">​</a></h5><ul><li>[ ] 整型/浮点的基本运算</li><li>[ ] operator precedence</li><li>[ ] 短路求值&amp;&amp;/||</li><li>[ ] 逗号运算符,和三目运算符?:</li><li>[ ] static_cast and reinterpret_cast</li></ul><h5 id="basic-control-flow" tabindex="-1">Basic Control Flow <a class="header-anchor" href="#basic-control-flow" aria-label="Permalink to &quot;Basic Control Flow&quot;">​</a></h5><ul><li>[x] if/else/else if</li><li>[x] for</li><li>[x] switch</li><li>[x] while/do-while</li><li>[x] continue/break</li><li>[x] return</li></ul><h5 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h5><ul><li>[ ] declaration/definition</li><li>[ ] function pointer/type of function pointer</li><li>[ ] overload</li></ul><h5 id="class" tabindex="-1">Class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;Class&quot;">​</a></h5><ul><li>[ ] (static) data members/member functions</li><li>[ ] member access specifiers: private/protected/public/friend</li><li>[ ] this pointer</li><li>[ ] special member functions: default constructor/copy constructor/copy assignment/move constructor/move assignment/destructor</li><li>[ ] default/delete specifier</li><li>[ ] derived class</li><li>[ ] abstract class/virtual function/pure virtual function</li><li>[ ] virtual destructor</li><li>[ ] const member function/mutable specifier</li><li>[ ] rule of 350</li><li>[ ] operator overloading</li><li>[ ] explicit converting constructor</li></ul><h5 id="basic-templates" tabindex="-1">Basic Templates <a class="header-anchor" href="#basic-templates" aria-label="Permalink to &quot;Basic Templates&quot;">​</a></h5><ul><li>[ ] template functions</li><li>[ ] template classes</li><li>[ ] template argument deduction</li><li>[ ] explicit specialization</li><li>[ ] auto deduction</li><li>[ ] trait helper class</li><li>[ ] SFINAE(std::enable_if_t/std::is_same_v)</li><li>[ ] dependent names</li><li>[ ] decltype</li><li>[ ] type_traits</li><li>[ ] type alias (typedef and using)</li></ul><h5 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h5><ul><li>[ ] stack unwinding when exception raises</li><li>[x] throw/catch</li><li>[ ] std::exception</li><li>[ ] built-in exception types</li><li>[ ] catch(const T&amp;)</li><li>[ ] catch(...)</li><li>[ ] RTTI in catching</li><li>[ ] noexcept specifier</li><li>[ ] rethrow</li><li>[ ] exception in destructor</li></ul><h5 id="right-value-reference-universal-reference" tabindex="-1">Right value reference/universal reference <a class="header-anchor" href="#right-value-reference-universal-reference" aria-label="Permalink to &quot;Right value reference/universal reference&quot;">​</a></h5><ul><li>[ ] left value reference vs right value reference</li><li>[ ] pass by value and std::move</li><li>[ ] Universal reference(T&amp;&amp; and auto&amp;&amp;) and std::forward</li></ul><h5 id="memory-management" tabindex="-1">Memory management <a class="header-anchor" href="#memory-management" aria-label="Permalink to &quot;Memory management&quot;">​</a></h5><ul><li>[x] malloc/free</li><li>[x] new/delete</li><li>[x] new[]/delete[]</li></ul><h5 id="raii" tabindex="-1">RAII <a class="header-anchor" href="#raii" aria-label="Permalink to &quot;RAII&quot;">​</a></h5><ul><li>[ ] ownership of resources</li><li>[ ] how to write correct copy/move constructor/assignment</li><li>[ ] std::unique_ptr/std::shared_ptr</li></ul><h5 id="rtti" tabindex="-1">RTTI <a class="header-anchor" href="#rtti" aria-label="Permalink to &quot;RTTI&quot;">​</a></h5><ul><li>[ ] dynamic_cast</li><li>[ ] typeid and std::type_info</li></ul><h5 id="lambda-function" tabindex="-1">Lambda function <a class="header-anchor" href="#lambda-function" aria-label="Permalink to &quot;Lambda function&quot;">​</a></h5><ul><li>[ ] lambda function definition</li><li>[ ] closure(capture by value/reference/move)</li><li>[ ] capture this</li><li>[ ] std::function and type erasing and recursion</li></ul><h5 id="multiple-file-compilation" tabindex="-1">Multiple file compilation <a class="header-anchor" href="#multiple-file-compilation" aria-label="Permalink to &quot;Multiple file compilation&quot;">​</a></h5><ul><li>[ ] lifetime of static variables</li><li>[ ] linkage</li><li>[ ] namespaces</li><li>[ ] extern specifier &amp; anonymous namespaces</li><li>[ ] main() entry</li></ul><h5 id="miscellaneous" tabindex="-1">Miscellaneous <a class="header-anchor" href="#miscellaneous" aria-label="Permalink to &quot;Miscellaneous&quot;">​</a></h5><ul><li>[ ] structured binding</li><li>[ ] constexpr</li><li>[ ] std::initializer_list</li><li>[ ] assert/static_assert</li></ul><h2 id="library" tabindex="-1">Library <a class="header-anchor" href="#library" aria-label="Permalink to &quot;Library&quot;">​</a></h2><h5 id="utilities-diagnostics" tabindex="-1">Utilities &amp; Diagnostics <a class="header-anchor" href="#utilities-diagnostics" aria-label="Permalink to &quot;Utilities &amp; Diagnostics&quot;">​</a></h5><ul><li>[ ] std::abort</li><li>[ ] std::exit</li><li>[ ] std::quick_exit</li><li>[ ] SIGSEGV/SIGFPE/SIGINT</li></ul><h5 id="time" tabindex="-1">Time <a class="header-anchor" href="#time" aria-label="Permalink to &quot;Time&quot;">​</a></h5><ul><li>[ ] Clocks/Durations/Time Points</li><li>[ ] std::chrono::high_resolution_clock</li><li>[ ] time_since_epoch</li></ul><h5 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h5><ul><li>[ ] ASCII &amp; Unicode</li><li>[ ] code points &amp; encodings</li><li>[ ] std::string</li><li>[ ] std::to_string/fmt::format</li><li>[ ] std::stringstream</li></ul><h5 id="containers-iterators" tabindex="-1">Containers &amp; Iterators <a class="header-anchor" href="#containers-iterators" aria-label="Permalink to &quot;Containers &amp; Iterators&quot;">​</a></h5><ul><li>[ ] [begin,end)</li><li>[ ] const iterators and reverse iterators</li><li>[ ] iterator traits</li><li>[ ] range-for</li><li>[ ] sequence containers: list/vector</li><li>[ ] std::unordered_set/std::unordered_map</li><li>[ ] iterator invalidation &amp; Member function table</li></ul><h5 id="helper-types" tabindex="-1">Helper Types <a class="header-anchor" href="#helper-types" aria-label="Permalink to &quot;Helper Types&quot;">​</a></h5><ul><li>[ ] std::pair &amp; std::tuple</li><li>[ ] std::any</li><li>[ ] std::optional (std::nullopt)</li><li>[ ] std::variant (std::monostate)</li></ul><h5 id="algorithm" tabindex="-1">Algorithm <a class="header-anchor" href="#algorithm" aria-label="Permalink to &quot;Algorithm&quot;">​</a></h5><ul><li>[ ] Non-modifying sequence operations</li><li>[ ] Modifying sequence operations</li><li>[ ] std::sort</li><li>[ ] Minimum/maximum operations</li></ul><h5 id="io-library" tabindex="-1">IO Library <a class="header-anchor" href="#io-library" aria-label="Permalink to &quot;IO Library&quot;">​</a></h5><ul><li>[ ] std::istream/std::ostream</li><li>[ ] std::fstream</li><li>[ ] std::cin/std::cout</li><li>[ ] std::endl/std::flush</li><li>[ ] ANSI color escape sequences</li></ul><h5 id="filesystem" tabindex="-1">Filesystem <a class="header-anchor" href="#filesystem" aria-label="Permalink to &quot;Filesystem&quot;">​</a></h5><ul><li>[ ] path</li><li>[ ] exists/is_regular_file</li><li>[ ] create/remove files/directories</li><li>[ ] directory_iterator &amp; recursive_directory_iterator</li></ul><h5 id="regex" tabindex="-1">Regex <a class="header-anchor" href="#regex" aria-label="Permalink to &quot;Regex&quot;">​</a></h5><ul><li>[ ] regular expressions (grammar &amp; verifying)</li><li>[ ] std::regex</li><li>[ ] std::regex_match</li><li>[ ] std::regex_search</li></ul><h5 id="threading" tabindex="-1">Threading <a class="header-anchor" href="#threading" aria-label="Permalink to &quot;Threading&quot;">​</a></h5><ul><li>[ ] std::thread (argument passing, join, detach)</li><li>[ ] std:🧵:hardware_concurrency</li><li>[ ] std::this_thread::get_id/sleep/yield</li><li>[ ] std::mutex &amp; std::lock_guard</li><li>[ ] std::shared_mutex &amp; std::shared_lock &amp; std::unique_lock</li><li>[ ] std::atomic_xxx &amp; CAS</li></ul><h5 id="numerics" tabindex="-1">Numerics <a class="header-anchor" href="#numerics" aria-label="Permalink to &quot;Numerics&quot;">​</a></h5><h6 id="cmath" tabindex="-1">cmath <a class="header-anchor" href="#cmath" aria-label="Permalink to &quot;cmath&quot;">​</a></h6><ul><li>[ ] abs/fabs</li><li>[ ] fmax/fmin</li><li>[ ] Exponential functions</li><li>[ ] Power functions</li><li>[ ] Trigonometric functions (atan2)</li><li>[ ] Nearest integer floating point operations</li></ul><h6 id="random" tabindex="-1">random <a class="header-anchor" href="#random" aria-label="Permalink to &quot;random&quot;">​</a></h6><ul><li>[ ] engines &amp; distributions &amp; seed</li><li>[ ] std::mt19937_64</li><li>[ ] uniform distribution</li></ul><h2 id="normalization" tabindex="-1">Normalization <a class="header-anchor" href="#normalization" aria-label="Permalink to &quot;Normalization&quot;">​</a></h2><ul><li>[ ] 代码格式规范</li><li>[ ] 参数传递规范</li><li>[ ] 命名规范</li></ul><h1 id="visual-studio" tabindex="-1">Visual Studio <a class="header-anchor" href="#visual-studio" aria-label="Permalink to &quot;Visual Studio&quot;">​</a></h1><ul><li>[ ] 构建cmake项目并运行程序</li><li>[ ] 调试/断点/单步/查看中间变量</li><li>[ ] 运行测试</li></ul><h1 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h1><ul><li>[ ] cmake版本约束</li><li>[ ] cmake全局变量</li><li>[ ] Compiler/OS/BuileType判断</li><li>[ ] 增加executable</li><li>[ ] vcpkg包管理</li><li>[ ] ctest</li><li>[ ] cmake命令行</li></ul><h1 id="vcpkg" tabindex="-1">vcpkg <a class="header-anchor" href="#vcpkg" aria-label="Permalink to &quot;vcpkg&quot;">​</a></h1><ul><li>[ ] vcpkg安装/更新/卸载/列举包</li><li>[ ] 集成vcpkg到VS中</li><li>[ ] 集成vcpkg到cmake中</li></ul><h1 id="git" tabindex="-1">git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;git&quot;">​</a></h1><ul><li>[ ] gitlab的使用</li><li>[ ] git add/commit/push/pull</li><li>[ ] git merge</li></ul><h1 id="opencv" tabindex="-1">OpenCV <a class="header-anchor" href="#opencv" aria-label="Permalink to &quot;OpenCV&quot;">​</a></h1><ul><li><p>[ ] RGB/HSV色彩空间</p></li><li><p>[ ] image/video读写</p></li><li><p>[ ] cv::Mat使用</p></li><li><p>[ ] cv::inRange/cv::threshold/cv::cvtColor</p></li><li><p>[ ] cv::erode/cv::dilate/cv::findContours</p></li><li><p>[ ] PowerToys的ColorPicker使用</p></li></ul><h1 id="glm" tabindex="-1">glm <a class="header-anchor" href="#glm" aria-label="Permalink to &quot;glm&quot;">​</a></h1><ul><li>[ ] OpenGL右手坐标系</li><li>[ ] glm::vec2/glm::vec3/glm::vec4/glm::mat3/glm::mat4的基本使用</li><li>[ ] matrix_transform</li><li>[ ] quaternion glm::quat</li><li>[ ] glm::perspective/glm::lookAt</li><li>[ ] constants.hpp</li></ul><h1 id="caf" tabindex="-1">CAF <a class="header-anchor" href="#caf" aria-label="Permalink to &quot;CAF&quot;">​</a></h1><ul><li>[ ] actor model</li><li>[ ] actor spawing</li><li>[ ] actor messaging</li></ul><h1 id="documentation" tabindex="-1">documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;documentation&quot;">​</a></h1><ul><li>[ ] 检索cppreference.com</li><li>[ ] 检索opencv文档</li><li>[ ] 检索cmake文档</li><li>[ ] 检索glm文档</li></ul>',90),o=[r];function n(s,c,u,h,d,m){return e(),l("div",null,o)}const b=i(t,[["render",n]]);export{f as __pageData,b as default};
